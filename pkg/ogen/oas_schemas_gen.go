// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/google/uuid"

	ht "github.com/ogen-go/ogen/http"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type DeletePhotoBadRequest Error

func (*DeletePhotoBadRequest) deletePhotoRes() {}

type DeletePhotoInternalServerError Error

func (*DeletePhotoInternalServerError) deletePhotoRes() {}

// DeletePhotoNoContent is response for DeletePhoto operation.
type DeletePhotoNoContent struct{}

func (*DeletePhotoNoContent) deletePhotoRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type GetPhotoBadRequest Error

func (*GetPhotoBadRequest) getPhotoRes() {}

type GetPhotoInternalServerError Error

func (*GetPhotoInternalServerError) getPhotoRes() {}

type GetPhotosBadRequest Error

func (*GetPhotosBadRequest) getPhotosRes() {}

type GetPhotosInternalServerError Error

func (*GetPhotosInternalServerError) getPhotosRes() {}

type GetPhotosOK struct {
	Data   []Photo              `json:"data"`
	Cursor OptGetPhotosOKCursor `json:"cursor"`
}

// GetData returns the value of Data.
func (s *GetPhotosOK) GetData() []Photo {
	return s.Data
}

// GetCursor returns the value of Cursor.
func (s *GetPhotosOK) GetCursor() OptGetPhotosOKCursor {
	return s.Cursor
}

// SetData sets the value of Data.
func (s *GetPhotosOK) SetData(val []Photo) {
	s.Data = val
}

// SetCursor sets the value of Cursor.
func (s *GetPhotosOK) SetCursor(val OptGetPhotosOKCursor) {
	s.Cursor = val
}

func (*GetPhotosOK) getPhotosRes() {}

type GetPhotosOKCursor struct {
	NextCursor OptString `json:"next_cursor"`
	HasMore    OptBool   `json:"has_more"`
}

// GetNextCursor returns the value of NextCursor.
func (s *GetPhotosOKCursor) GetNextCursor() OptString {
	return s.NextCursor
}

// GetHasMore returns the value of HasMore.
func (s *GetPhotosOKCursor) GetHasMore() OptBool {
	return s.HasMore
}

// SetNextCursor sets the value of NextCursor.
func (s *GetPhotosOKCursor) SetNextCursor(val OptString) {
	s.NextCursor = val
}

// SetHasMore sets the value of HasMore.
func (s *GetPhotosOKCursor) SetHasMore(val OptBool) {
	s.HasMore = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPhotosOKCursor returns new OptGetPhotosOKCursor with value set to v.
func NewOptGetPhotosOKCursor(v GetPhotosOKCursor) OptGetPhotosOKCursor {
	return OptGetPhotosOKCursor{
		Value: v,
		Set:   true,
	}
}

// OptGetPhotosOKCursor is optional GetPhotosOKCursor.
type OptGetPhotosOKCursor struct {
	Value GetPhotosOKCursor
	Set   bool
}

// IsSet returns true if OptGetPhotosOKCursor was set.
func (o OptGetPhotosOKCursor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPhotosOKCursor) Reset() {
	var v GetPhotosOKCursor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPhotosOKCursor) SetTo(v GetPhotosOKCursor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPhotosOKCursor) Get() (v GetPhotosOKCursor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPhotosOKCursor) Or(d GetPhotosOKCursor) GetPhotosOKCursor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Photo
type Photo struct {
	ID        OptUUID     `json:"id"`
	URL       OptString   `json:"url"`
	CreatedAt OptDateTime `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *Photo) GetID() OptUUID {
	return s.ID
}

// GetURL returns the value of URL.
func (s *Photo) GetURL() OptString {
	return s.URL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Photo) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Photo) SetID(val OptUUID) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *Photo) SetURL(val OptString) {
	s.URL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Photo) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

func (*Photo) getPhotoRes()  {}
func (*Photo) postPhotoRes() {}

type PostPhotoBadRequest Error

func (*PostPhotoBadRequest) postPhotoRes() {}

type PostPhotoInternalServerError Error

func (*PostPhotoInternalServerError) postPhotoRes() {}

type PostPhotoReq struct {
	File OptMultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *PostPhotoReq) GetFile() OptMultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *PostPhotoReq) SetFile(val OptMultipartFile) {
	s.File = val
}
